{"version":3,"sources":["logo.svg","components/search-box/search-box.js","components/card/card.js","components/card-list/card-list.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SearchBox","_ref","onSearchChange","text","react_default","a","createElement","Fragment","type","value","onChange","Card","name","src","concat","CardList","monsters","map","monster","card","key","id","App","_useState","useState","_useState2","Object","slicedToArray","setMonsters","_useState3","_useState4","filtered","setFiltered","_useState5","_useState6","setText","useEffect","console","log","fetch","then","response","json","results","filter","toLowerCase","includes","search_box","e","target","card_list","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2ICWzBC,eATG,SAAAC,GAA8B,IAA3BC,EAA2BD,EAA3BC,eAAgBC,EAAWF,EAAXE,KACnC,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,iBAEEH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,MAAON,EAAMO,SAAUR,OCKjCS,EATF,SAAAV,GAAc,IAAXW,EAAWX,EAAXW,KACd,OACER,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACGK,EACDR,EAAAC,EAAAC,cAAA,OAAKO,IAAG,wBAAAC,OAA0BF,OCMzBG,EARE,SAAAd,GAAkB,IAAfe,EAAef,EAAfe,SAClB,OACEZ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACGS,EAASC,IAAI,SAAAC,GAAO,OAAId,EAAAC,EAAAC,cAACa,EAAD,CAAMC,IAAKF,EAAQG,GAAIT,KAAMM,EAAQN,WCqCrDU,EArCH,WAAM,IAAAC,EAEgBC,mBAAS,IAFzBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAETP,EAFSS,EAAA,GAECG,EAFDH,EAAA,GAAAI,EAGgBL,mBAAS,IAHzBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAGTE,EAHSD,EAAA,GAGCE,EAHDF,EAAA,GAAAG,EAIQT,mBAAS,IAJjBU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAIT9B,EAJS+B,EAAA,GAIHC,EAJGD,EAAA,GA4BhB,OAlBAE,oBAAU,WACRC,QAAQC,IAAI,YACZC,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAO,OAAIf,EAAYe,MAC9B,IAEHP,oBAAU,WACRC,QAAQC,IAAI,sBACZN,EAAYhB,EAAS4B,OAAO,SAAA1B,GAAO,OAAIA,EAAQN,KAAKiC,cAAcC,SAAS3C,EAAK0C,mBAC/E,CAAC1C,IASFC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACyC,EAAD,CAAW7C,eAzBQ,SAAC8C,GACtBb,EAAQa,EAAEC,OAAOxC,QAwB4BN,KAAMA,IACjDC,EAAAC,EAAAC,cAAC4C,EAAD,CAAUlC,SAAUe,MC3BNoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.1b3fcb6b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nconst SearchBox = ({ onSearchChange, text }) => {\r\n  return (\r\n    <>\r\n      SearchBox\r\n      <input type='text' value={text} onChange={onSearchChange} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\nconst Card = ({ name }) => {\r\n  return (\r\n    <>\r\n      {name}\r\n      <img src={`https://robohash.org/${name}`} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Card","import React from 'react'\r\n\r\nimport Card from '../card/card'\r\n\r\nconst CardList = ({ monsters }) => {\r\n  return (\r\n    <>\r\n      {monsters.map(monster => <Card key={monster.id} name={monster.name} />)}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CardList","import React, { useState, useEffect, useCallback } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport SearchBox from './components/search-box/search-box'\nimport CardList from './components/card-list/card-list'\n\nconst App = () => {\n\n  const [monsters, setMonsters] = useState([])\n  const [filtered, setFiltered] = useState([])\n  const [text, setText] = useState('')\n\n  const onSearchChange = (e) => {\n    setText(e.target.value)\n  }\n\n  useEffect(() => {\n    console.log('didmount')\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(results => setMonsters(results))\n  }, [])\n\n  useEffect(() => {\n    console.log('when changing text')\n    setFiltered(monsters.filter(monster => monster.name.toLowerCase().includes(text.toLowerCase())))\n  }, [text])\n\n  // const filteredMonsters = useCallback(() => {\n  //   console.log('wow')\n  //   setFiltered(monsters.filter(monster => monster.name.toLowerCase().includes(text.toLowerCase())))\n  // }, [text])\n\n  \n  return (\n    <>\n      <h1>monsters rolodex</h1>\n      <SearchBox onSearchChange={onSearchChange} text={text} />\n      <CardList monsters={filtered} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}